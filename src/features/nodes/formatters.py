"""
Node data formatters
"""
from typing import Dict, Any


def _create_progress_bar(percentage: float, length: int = 10) -> str:
    """Create a visual progress bar using Unicode blocks"""
    if percentage < 0:
        percentage = 0
    elif percentage > 100:
        percentage = 100
    
    filled = int(length * percentage / 100)
    empty = length - filled
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Unicode –±–ª–æ–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    bar = '‚ñà' * filled + '‚ñë' * empty
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ emoji
    if percentage < 50:
        indicator = 'üü¢'
    elif percentage < 80:
        indicator = 'üü°'
    else:
        indicator = 'üî¥'
    
    return f"{indicator} [{bar}] {percentage:.1f}%"


def format_node_full(node: Dict[str, Any]) -> str:
    """Format full node information"""
    name = node.get('name', 'N/A')
    address = node.get('address', 'N/A')
    port = node.get('port', 'N/A')
    is_disabled = node.get('isDisabled', False)
    
    status_emoji = 'üî¥' if is_disabled else 'üü¢'
    status_text = '–û—Ç–∫–ª—é—á–µ–Ω–∞' if is_disabled else '–ê–∫—Ç–∏–≤–Ω–∞'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text_lines = [
        "üì° <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–¥–µ</b>",
        "",
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}",
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}",
        "",
        "üåê <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b>",
        f"‚îú –ê–¥—Ä–µ—Å: <code>{address}</code>",
        f"‚îî –ü–æ—Ä—Ç: {port}",
    ]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï–ì–î–ê
    traffic_used = node.get('trafficUsedBytes', 0)
    traffic_limit = node.get('trafficLimitBytes', 0)
    is_traffic_tracking = node.get('isTrafficTrackingActive', False)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ GB
    used_gb = traffic_used / (1024**3) if traffic_used else 0
    limit_gb = traffic_limit / (1024**3) if traffic_limit else 0
    
    text_lines.append("")
    text_lines.append("üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b>")
    
    if is_traffic_tracking and traffic_limit and traffic_limit > 0:
        # –ï—Å–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç
        percentage = (traffic_used / traffic_limit * 100) if traffic_limit > 0 else 0
        progress_bar = _create_progress_bar(percentage)
        
        text_lines.append(f"‚îú {progress_bar}")
        text_lines.append(f"‚îú –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{used_gb:.2f} GB</b> / {limit_gb:.2f} GB")
        
        # –î–µ–Ω—å —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        reset_day = node.get('trafficResetDay')
        if reset_day:
            text_lines.append(f"‚îî –°–±—Ä–æ—Å: {reset_day}-–≥–æ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞")
        else:
            text_lines[-1] = text_lines[-1].replace('‚îú', '‚îî')
    elif is_traffic_tracking:
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–æ –±–µ–∑ –ª–∏–º–∏—Ç–∞
        text_lines.append(f"‚îú –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{used_gb:.2f} GB</b> / ‚àû")
        text_lines.append(f"‚îî –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: <b>–í–∫–ª—é—á–µ–Ω–æ</b>")
    else:
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
        text_lines.append(f"‚îú –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{used_gb:.2f} GB</b>")
        text_lines.append(f"‚îî –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: <b>–í—ã–∫–ª—é—á–µ–Ω–æ</b>")
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ != 1.0)
    consumption_mult = node.get('consumptionMultiplier', 1.0)
    if consumption_mult and consumption_mult != 1.0:
        text_lines.append("")
        text_lines.append(f"‚öôÔ∏è <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:</b> {consumption_mult}x")
    
    return '\n'.join(text_lines)


def format_node_short(node: Dict[str, Any]) -> str:
    """Format node in short format"""
    name = node.get('name', 'N/A')
    address = node.get('address', 'N/A')
    port = node.get('port', 'N/A')
    is_disabled = node.get('isDisabled', False)
    
    status_emoji = 'üî¥' if is_disabled else 'üü¢'
    
    return f"{status_emoji} <b>{name}</b> | {address}:{port}"

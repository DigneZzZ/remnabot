"""
Node management handlers
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode

from src.core.logger import log
from src.middleware.auth import admin_only
from src.services.api import api_client, RemnaWaveAPIError

from . import keyboards as node_kb
from . import formatters as node_fmt


@admin_only
async def nodes_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show nodes management menu"""
    query = update.callback_query
    await query.answer()
    
    text = """
üì° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥–∞–º–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=node_kb.nodes_menu(),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def nodes_list_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show nodes list with interactive buttons"""
    query = update.callback_query
    await query.answer()
    
    try:
        await query.edit_message_text(
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–æ–¥...",
            parse_mode=ParseMode.HTML
        )
        
        response = await api_client.get_nodes()
        nodes = response.get('response', [])
        
        if not nodes:
            text = "üì° <b>–°–ø–∏—Å–æ–∫ –Ω–æ–¥</b>\n\n–ù–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        else:
            text = f"üì° <b>–°–ø–∏—Å–æ–∫ –Ω–æ–¥</b>\n"
            text += f"<i>–í—Å–µ–≥–æ: {len(nodes)} –Ω–æ–¥</i>\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–¥—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
            
            # Build keyboard with node buttons
            keyboard = []
            for node in nodes:
                name = node.get('name', 'N/A')
                address = node.get('address', 'N/A')
                port = node.get('port', 'N/A')
                uuid = node.get('uuid', '')
                is_disabled = node.get('isDisabled', False)
                
                status_emoji = 'üî¥' if is_disabled else 'üü¢'
                button_text = f"{status_emoji} {name} | {address}:{port}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"node_view:{uuid}")])
            
            # Add back button
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error fetching nodes: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞:</b>\n{str(e)}",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in nodes list")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def node_view_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show detailed node information"""
    query = update.callback_query
    await query.answer()
    
    try:
        node_uuid = query.data.split(":")[1]
        
        await query.edit_message_text(
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...",
            parse_mode=ParseMode.HTML
        )
        
        # Fetch node details
        response = await api_client.get_node(node_uuid)
        node = response.get('response', {})
        
        if not node:
            await query.edit_message_text(
                "‚ùå –ù–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=node_kb.nodes_menu(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # Format node info
        text = node_fmt.format_node_full(node)
        
        await query.edit_message_text(
            text,
            reply_markup=node_kb.node_actions(node_uuid),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error fetching node: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{str(e)}",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in node view")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def node_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Delete node"""
    query = update.callback_query
    await query.answer()
    
    try:
        node_uuid = query.data.split(":")[1]
        
        await query.edit_message_text(
            "‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã...",
            parse_mode=ParseMode.HTML
        )
        
        await api_client.delete_node(node_uuid)
        
        await query.edit_message_text(
            "‚úÖ <b>–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞</b>",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error deleting node: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:</b>\n{str(e)}",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in node delete")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )


def register_nodes_handlers(application):
    """Register all node management handlers"""
    application.add_handler(CallbackQueryHandler(nodes_menu_callback, pattern="^nodes_menu$"))
    application.add_handler(CallbackQueryHandler(nodes_list_callback, pattern="^nodes_list$"))
    application.add_handler(CallbackQueryHandler(node_view_callback, pattern="^node_view:"))
    application.add_handler(CallbackQueryHandler(node_delete_callback, pattern="^node_delete:"))
    
    log.info("‚úÖ Nodes feature handlers registered")

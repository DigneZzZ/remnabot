"""
Node actions handlers: stats, restart, smart delete
"""
import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from src.core.logger import log
from src.middleware.auth import admin_only
from src.services.api import api_client, RemnaWaveAPIError

from . import keyboards as node_kb


def _generate_confirmation_code(length=6):
    """Generate random confirmation code"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))


@admin_only
async def node_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show node statistics"""
    query = update.callback_query
    await query.answer()
    
    try:
        node_uuid = query.data.split(":")[1]
        
        await query.edit_message_text(
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...",
            parse_mode=ParseMode.HTML
        )
        
        # Fetch node details
        response = await api_client.get_node(node_uuid)
        node = response.get('response', {})
        
        if not node:
            await query.edit_message_text(
                "‚ùå –ù–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                parse_mode=ParseMode.HTML
            )
            return
        
        # Format statistics
        name = node.get('name', 'N/A')
        address = node.get('address', 'N/A')
        port = node.get('port', 'N/A')
        is_disabled = node.get('isDisabled', False)
        country_code = node.get('countryCode', 'N/A')
        
        # Traffic info
        traffic_limit = node.get('trafficLimitBytes', 0)
        traffic_used = node.get('trafficUsedBytes', 0)
        is_tracking = node.get('isTrafficTrackingActive', False)
        notify_percent = node.get('notifyPercent', 0)
        traffic_reset_day = node.get('trafficResetDay', 0)
        consumption_multiplier = node.get('consumptionMultiplier', 1.0)
        users_count = len(node.get('users', []))
        
        status_emoji = 'üî¥' if is_disabled else 'üü¢'
        tracking_emoji = '‚úÖ' if is_tracking else '‚ùå'
        
        # Format traffic used
        def format_bytes(bytes_val):
            if bytes_val >= 1024**4:
                return f"{bytes_val / (1024**4):.2f} TB"
            elif bytes_val >= 1024**3:
                return f"{bytes_val / (1024**3):.2f} GB"
            elif bytes_val >= 1024**2:
                return f"{bytes_val / (1024**2):.2f} MB"
            elif bytes_val >= 1024:
                return f"{bytes_val / 1024:.2f} KB"
            else:
                return f"{bytes_val} –ë"
        
        traffic_used_str = format_bytes(traffic_used)
        traffic_limit_str = format_bytes(traffic_limit) if traffic_limit else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        # Calculate percentage if limit is set
        if traffic_limit and traffic_limit > 0:
            usage_percent = (traffic_used / traffic_limit) * 100
            usage_bar = "‚ñà" * int(usage_percent / 10) + "‚ñë" * (10 - int(usage_percent / 10))
            usage_info = f"\nüìà <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {usage_percent:.1f}% [{usage_bar}]"
        else:
            usage_info = ""
        
        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥—ã</b>

{status_emoji} <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}
üåê <b>–ê–¥—Ä–µ—Å:</b> <code>{address}:{port}</code>
üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {country_code}
üìà <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:</b> {consumption_multiplier}x
üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {users_count}

<b>–¢—Ä–∞—Ñ–∏–∫:</b>
{tracking_emoji} <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:</b> {'–í–∫–ª—é—á–µ–Ω–æ' if is_tracking else '–í—ã–∫–ª—é—á–µ–Ω–æ'}
üìä <b>–õ–∏–º–∏—Ç:</b> {traffic_limit_str}
üì• <b>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ:</b> {traffic_used_str}{usage_info}
üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b> {notify_percent}%
üìÖ <b>–î–µ–Ω—å —Å–±—Ä–æ—Å–∞:</b> {traffic_reset_day} —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"node_stats:{node_uuid}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"node_view:{node_uuid}")]
        ]
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error fetching node stats: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{str(e)}",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in node stats")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def node_restart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Restart single node"""
    query = update.callback_query
    await query.answer()
    
    try:
        node_uuid = query.data.split(":")[1]
        
        await query.edit_message_text(
            "‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–æ–¥—ã...",
            parse_mode=ParseMode.HTML
        )
        
        # Restart node via API
        await api_client.restart_node(node_uuid)
        
        await query.edit_message_text(
            "‚úÖ <b>–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞</b>",
            reply_markup=node_kb.node_actions(node_uuid),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error restarting node: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:</b>\n{str(e)}",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in node restart")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def node_toggle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Enable/disable node"""
    query = update.callback_query
    await query.answer()
    
    try:
        parts = query.data.split(":")
        action = parts[0]  # node_enable or node_disable
        node_uuid = parts[1]
        
        await query.edit_message_text(
            "‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...",
            parse_mode=ParseMode.HTML
        )
        
        # Enable or disable via API
        if action == "node_enable":
            await api_client.enable_node(node_uuid)
            status_text = "–≤–∫–ª—é—á–µ–Ω–∞"
        else:
            await api_client.disable_node(node_uuid)
            status_text = "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        
        # Fetch updated node data
        response = await api_client.get_node(node_uuid)
        node = response.get('response', {})
        
        from .formatters import format_node_full
        text = f"‚úÖ <b>–ù–æ–¥–∞ {status_text}</b>\n\n{format_node_full(node)}"
        
        await query.edit_message_text(
            text,
            reply_markup=node_kb.node_actions(node_uuid),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error toggling node: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{str(e)}",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in node toggle")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def node_delete_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start smart delete process with confirmation code"""
    query = update.callback_query
    await query.answer()
    
    try:
        node_uuid = query.data.split(":")[1]
        
        # Fetch node info
        response = await api_client.get_node(node_uuid)
        node = response.get('response', {})
        
        if not node:
            await query.edit_message_text(
                "‚ùå –ù–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                parse_mode=ParseMode.HTML
            )
            return
        
        # Generate confirmation code
        code = _generate_confirmation_code()
        
        # Store in context
        context.user_data['delete_node_confirmation'] = {
            'node_uuid': node_uuid,
            'code': code,
            'node_name': node.get('name', 'Unknown')
        }
        
        name = node.get('name', 'N/A')
        address = node.get('address', 'N/A')
        port = node.get('port', 'N/A')
        
        text = f"""
‚ö†Ô∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ù–û–î–´</b>

üóë <b>–ù–æ–¥–∞:</b> {name}
üåê <b>–ê–¥—Ä–µ—Å:</b> {address}:{port}

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥:
<code>{code}</code>

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.
        """
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"node_delete_cancel:{node_uuid}")]]
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        log.error(f"Error starting node delete: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            parse_mode=ParseMode.HTML
        )


@admin_only
async def node_delete_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle delete confirmation code input"""
    if not context.user_data.get('delete_node_confirmation'):
        return
    
    try:
        user_input = update.message.text.strip()
        delete_data = context.user_data['delete_node_confirmation']
        
        # Delete user's message
        await update.message.delete()
        
        if user_input != delete_data['code']:
            sent_msg = await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                parse_mode=ParseMode.HTML
            )
            await sent_msg.delete()
            return
        
        # Code is correct, proceed with deletion
        node_uuid = delete_data['node_uuid']
        node_name = delete_data['node_name']
        
        sent_msg = await update.message.reply_text(
            "‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã...",
            parse_mode=ParseMode.HTML
        )
        
        try:
            await api_client.delete_node(node_uuid)
            
            # Clear confirmation data
            context.user_data.pop('delete_node_confirmation', None)
            
            await sent_msg.edit_text(
                f"‚úÖ <b>–ù–æ–¥–∞ '{node_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞</b>",
                reply_markup=node_kb.nodes_menu(),
                parse_mode=ParseMode.HTML
            )
            
        except RemnaWaveAPIError as e:
            log.error(f"Error deleting node: {e}")
            await sent_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:</b>\n{str(e)}",
                reply_markup=node_kb.nodes_menu(),
                parse_mode=ParseMode.HTML
            )
            context.user_data.pop('delete_node_confirmation', None)
            
    except Exception as e:
        log.exception("Unexpected error in node delete confirm")
        sent_msg = await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            parse_mode=ParseMode.HTML
        )
        await sent_msg.delete()
        context.user_data.pop('delete_node_confirmation', None)


@admin_only
async def node_delete_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel node deletion"""
    query = update.callback_query
    await query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    
    node_uuid = query.data.split(":")[1]
    
    # Clear confirmation data
    context.user_data.pop('delete_node_confirmation', None)
    
    # Return to node view
    try:
        response = await api_client.get_node(node_uuid)
        node = response.get('response', {})
        
        from .formatters import format_node_full
        text = format_node_full(node)
        
        await query.edit_message_text(
            text,
            reply_markup=node_kb.node_actions(node_uuid),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.error(f"Error in delete cancel: {e}")
        await query.edit_message_text(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=node_kb.nodes_menu(),
            parse_mode=ParseMode.HTML
        )

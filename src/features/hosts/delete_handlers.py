"""
Handlers for host deletion with smart confirmation
"""
import random
import string
import logging

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from src.middleware.auth import admin_only
from src.services.api import api_client, RemnaWaveAPIError
from src.features.hosts import keyboards as host_kb


log = logging.getLogger(__name__)


def _generate_confirmation_code(length: int = 6) -> str:
    """Generate random confirmation code"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))


@admin_only
async def host_delete_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start host deletion with confirmation code"""
    query = update.callback_query
    await query.answer()
    
    try:
        host_uuid = query.data.split(":")[1]
        
        # Get host info
        response = await api_client.get_host(host_uuid)
        host = response.get('response', {})
        
        if not host:
            await query.edit_message_text(
                "‚ùå <b>–•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
                reply_markup=host_kb.hosts_menu(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # Generate confirmation code
        confirmation_code = _generate_confirmation_code()
        
        # Store info in context
        context.user_data['delete_host_confirmation'] = {
            'uuid': host_uuid,
            'code': confirmation_code,
            'name': host.get('remark', 'N/A')
        }
        
        host_name = host.get('remark', 'N/A')
        address = host.get('address', 'N/A')
        port = host.get('port', 'N/A')
        inbound_tag = host.get('inboundTag', 'N/A')
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"host_delete_cancel:{host_uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""
‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ö–æ—Å—Ç?

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {host_name}
<b>–ê–¥—Ä–µ—Å:</b> <code>{address}:{port}</code>
<b>Inbound:</b> {inbound_tag}

‚ùóÔ∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥:
<code>{confirmation_code}</code>
        """
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error getting host for deletion: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞:</b>\n{str(e)}",
            reply_markup=host_kb.hosts_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in host delete start")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=host_kb.hosts_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def host_delete_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle confirmation code input for host deletion"""
    if not update.message or not update.message.text:
        return
    
    user_code = update.message.text.strip()
    
    # Check if user is in delete confirmation flow
    delete_info = context.user_data.get('delete_host_confirmation')
    if not delete_info:
        return
    
    expected_code = delete_info.get('code')
    host_uuid = delete_info.get('uuid')
    host_name = delete_info.get('name')
    
    if user_code == expected_code:
        try:
            # Delete host
            await api_client.delete_host(host_uuid)
            
            # Clear state
            del context.user_data['delete_host_confirmation']
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Ö–æ—Å—Ç–æ–≤", callback_data="hosts_list")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ <b>–•–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {host_name}",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            
        except RemnaWaveAPIError as e:
            log.error(f"Error deleting host: {e}")
            # Clear state on error too
            if 'delete_host_confirmation' in context.user_data:
                del context.user_data['delete_host_confirmation']
            
            await update.message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞:</b>\n{str(e)}",
                reply_markup=host_kb.hosts_menu(),
                parse_mode=ParseMode.HTML
            )
    else:
        # Wrong code
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"host_delete_cancel:{host_uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!</b>\n\n"
            f"–û–∂–∏–¥–∞–µ—Ç—Å—è: <code>{expected_code}</code>\n"
            f"–í–≤–µ–¥–µ–Ω–æ: <code>{user_code}</code>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )


@admin_only
async def host_delete_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel host deletion"""
    query = update.callback_query
    await query.answer()
    
    try:
        host_uuid = query.data.split(":")[1]
        
        # Clear state
        if 'delete_host_confirmation' in context.user_data:
            del context.user_data['delete_host_confirmation']
        
        # Get host info
        response = await api_client.get_host(host_uuid)
        host = response.get('response', {})
        
        if not host:
            await query.edit_message_text(
                "‚ùå <b>–•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
                reply_markup=host_kb.hosts_menu(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # Show host details
        host_name = host.get('remark', 'N/A')
        address = host.get('address', 'N/A')
        port = host.get('port', 'N/A')
        inbound_tag = host.get('inboundTag', 'N/A')
        
        text = f"""
üñ• <b>–•–æ—Å—Ç: {host_name}</b>

<b>–ê–¥—Ä–µ—Å:</b> <code>{address}:{port}</code>
<b>Inbound:</b> {inbound_tag}
        """
        
        reply_markup = host_kb.host_actions(host_uuid)
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error in delete cancel: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{str(e)}",
            reply_markup=host_kb.hosts_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in delete cancel")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=host_kb.hosts_menu(),
            parse_mode=ParseMode.HTML
        )

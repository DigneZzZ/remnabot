"""
Mass operations handlers
"""
from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode

from src.core.logger import log
from src.middleware.auth import admin_only
from src.services.api import api_client, RemnaWaveAPIError

from . import keyboards as mass_kb
from . import formatters as mass_fmt


@admin_only
async def mass_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show mass operations menu"""
    query = update.callback_query
    await query.answer()
    
    text = """
üîÑ <b>–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –û–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=mass_kb.mass_menu(),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def mass_extend_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show extend days selection"""
    query = update.callback_query
    await query.answer()
    
    text = """
‚è∞ <b>–ü—Ä–æ–¥–ª–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=mass_kb.extend_days_keyboard(),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def mass_extend_days_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process mass extend with selected days"""
    query = update.callback_query
    await query.answer()
    
    try:
        days = int(query.data.split(":")[1])
        
        # Store days in context for confirmation
        context.user_data['mass_extend_days'] = days
        
        text = f"""
‚è∞ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å <b>–≤—Å–µ–º</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞ <b>{days} –¥–Ω–µ–π</b>?

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
        """
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=mass_kb.confirmation_keyboard(f"extend:{days}"),
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        log.exception("Error in mass extend days")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>",
            reply_markup=mass_kb.mass_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def mass_activate_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Confirm mass activation"""
    query = update.callback_query
    await query.answer()
    
    text = """
‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ <b>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=mass_kb.confirmation_keyboard("activate"),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def mass_deactivate_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Confirm mass deactivation"""
    query = update.callback_query
    await query.answer()
    
    text = """
‚è∏Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ <b>–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=mass_kb.confirmation_keyboard("deactivate"),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def mass_reset_traffic_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Confirm mass traffic reset"""
    query = update.callback_query
    await query.answer()
    
    text = """
üîÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞</b>

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ <b>—Å–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –≤—Å–µ–º</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=mass_kb.confirmation_keyboard("reset_traffic"),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def mass_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Execute confirmed mass operation"""
    query = update.callback_query
    await query.answer()
    
    try:
        operation = query.data.split(":", 1)[1]
        
        await query.edit_message_text(
            "‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∞—Å—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
            parse_mode=ParseMode.HTML
        )
        
        if operation.startswith("extend:"):
            days = int(operation.split(":")[1])
            response = await api_client.mass_extend_users(days)
        elif operation == "activate":
            response = await api_client.mass_activate_users()
        elif operation == "deactivate":
            response = await api_client.mass_deactivate_users()
        elif operation == "reset_traffic":
            response = await api_client.mass_reset_traffic()
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
                reply_markup=mass_kb.mass_menu(),
                parse_mode=ParseMode.HTML
            )
            return
        
        result = response.get('response', {})
        text = mass_fmt.format_operation_result(result)
        
        await query.edit_message_text(
            text,
            reply_markup=mass_kb.mass_menu(),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error in mass operation: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{str(e)}",
            reply_markup=mass_kb.mass_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in mass operation")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=mass_kb.mass_menu(),
            parse_mode=ParseMode.HTML
        )


def register_mass_handlers(application):
    """Register all mass operations handlers"""
    application.add_handler(CallbackQueryHandler(mass_menu_callback, pattern="^mass_menu$"))
    application.add_handler(CallbackQueryHandler(mass_extend_callback, pattern="^mass_extend$"))
    application.add_handler(CallbackQueryHandler(mass_extend_days_callback, pattern="^mass_extend_days:"))
    application.add_handler(CallbackQueryHandler(mass_activate_confirm_callback, pattern="^mass_activate$"))
    application.add_handler(CallbackQueryHandler(mass_deactivate_confirm_callback, pattern="^mass_deactivate$"))
    application.add_handler(CallbackQueryHandler(mass_reset_traffic_confirm_callback, pattern="^mass_reset_traffic$"))
    application.add_handler(CallbackQueryHandler(mass_confirm_callback, pattern="^mass_confirm:"))
    
    log.info("‚úÖ Mass operations feature handlers registered")

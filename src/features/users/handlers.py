"""
User management handlers
Feature-based architecture
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from telegram.constants import ParseMode
from datetime import datetime, timedelta, timezone
import asyncio

from src.core.logger import log
from src.core.config import settings
from src.middleware.auth import admin_only
from src.services.api import api_client, RemnaWaveAPIError

from . import keyboards as user_kb
from . import formatters as user_fmt

# Conversation states –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
EDIT_CHOOSING, EDIT_TRAFFIC_LIMIT, EDIT_EXPIRE_DATE, EDIT_STATUS = range(4)

# Conversation states –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CREATE_USERNAME, CREATE_TRAFFIC_LIMIT, CREATE_EXPIRE_DAYS, CREATE_CONFIRM = range(4, 8)

# Conversation states –¥–ª—è –ø–æ–∏—Å–∫–∞
SEARCH_INPUT = 8

# Conversation states –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏
BULK_COUNT, BULK_DURATION, BULK_TRAFFIC, BULK_RESET, BULK_CONFIRM = range(9, 14)


@admin_only
async def users_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show users management menu"""
    query = update.callback_query
    await query.answer()
    
    text = """
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=user_kb.users_menu(),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def users_list_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show users list with interactive buttons"""
    query = update.callback_query
    await query.answer()
    
    # Extract page from callback data
    page = 1
    if ":" in query.data:
        try:
            page = int(query.data.split(":")[1])
        except (IndexError, ValueError):
            page = 1
    
    try:
        await query.edit_message_text(
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            parse_mode=ParseMode.HTML
        )
        
        # Fetch users
        response = await api_client.get_users(page=page, limit=10)
        data = response.get('response', {})
        users = data.get('users', [])
        total = data.get('total', 0)
        total_pages = (total + 9) // 10
        
        if not users:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        else:
            text = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (—Å—Ç—Ä. {page}/{total_pages})\n"
            text += f"<i>–í—Å–µ–≥–æ: {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
            
            # Build keyboard with user buttons
            keyboard = []
            for user in users:
                username = user.get('username', 'N/A')
                status = user.get('status', 'unknown').upper()
                uuid = user.get('uuid', '')
                used_traffic = user_fmt.format_bytes(user.get('usedTrafficBytes', 0))
                
                status_emoji = {
                    'ACTIVE': '‚úÖ',
                    'DISABLED': 'üö´',
                    'LIMITED': '‚ö†Ô∏è',
                    'EXPIRED': '‚è±Ô∏è'
                }.get(status, '‚ùì')
                
                button_text = f"{status_emoji} {username} | {used_traffic}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"user_view:{uuid}")])
            
            # Add pagination if needed
            if total_pages > 1:
                pagination_buttons = user_kb.pagination(page, total_pages, "users_page")
                keyboard.append(pagination_buttons)
            
            # Add back button
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error fetching users: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞:</b>\n{str(e)}",
            reply_markup=user_kb.users_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in users list")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=user_kb.users_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def user_view_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show detailed user information"""
    query = update.callback_query
    await query.answer()
    
    try:
        user_uuid = query.data.split(":")[1]
        
        await query.edit_message_text(
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...",
            parse_mode=ParseMode.HTML
        )
        
        # Fetch user details
        response = await api_client.get_user(user_uuid)
        user = response.get('response', {})
        
        if not user:
            await query.edit_message_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=user_kb.users_menu(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # Get HWID count
        hwid_count = 0
        try:
            hwid_response = await api_client.get_user_devices(user_uuid)
            response_data = hwid_response.get('response', {})
            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'total': N, 'devices': [...]}
            hwid_count = response_data.get('total', 0)
        except Exception as e:
            log.warning(f"Failed to get HWID count: {e}")
        
        # Format user info
        text = user_fmt.format_user_full(user, hwid_count=hwid_count)
        
        await query.edit_message_text(
            text,
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error fetching user: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{str(e)}",
            reply_markup=user_kb.users_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in user view")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=user_kb.users_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def user_extend_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show subscription extension presets"""
    query = update.callback_query
    await query.answer()
    
    user_uuid = query.data.split(":")[1]
    
    text = """
üìÖ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=user_kb.extend_presets(user_uuid),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def extend_user_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Execute subscription extension"""
    query = update.callback_query
    await query.answer()
    
    try:
        parts = query.data.split(":")
        user_uuid = parts[1]
        days = int(parts[2])
        
        await query.edit_message_text(
            f"‚è≥ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π...",
            parse_mode=ParseMode.HTML
        )
        
        result = await api_client.extend_user_subscription(user_uuid, days)
        
        await query.edit_message_text(
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π!</b>",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error extending subscription: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏:</b>\n{str(e)}",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in extend user")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )


@admin_only
# OLD PIN-BASED DELETE HANDLERS - REPLACED WITH SMART DELETE IN delete_handlers.py
# user_delete_confirm_callback, user_delete_pin_callback, handle_delete_pin - removed


@admin_only
async def user_reset_traffic_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Reset user traffic"""
    query = update.callback_query
    await query.answer()
    
    try:
        user_uuid = query.data.split(":")[1]
        
        await query.edit_message_text(
            "‚è≥ –°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞...",
            parse_mode=ParseMode.HTML
        )
        
        await api_client.reset_user_traffic(user_uuid)
        
        await query.edit_message_text(
            "‚úÖ <b>–¢—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!</b>",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error resetting traffic: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{str(e)}",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in reset traffic")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def user_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show detailed user statistics"""
    query = update.callback_query
    await query.answer()
    
    user_uuid = query.data.split(":")[1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_response = await api_client.get_user(user_uuid)
        user = user_response.get('response', {})
        
        username = user.get('username', 'N/A')
        status = user.get('status', 'unknown').upper()
        
        # –¢—Ä–∞—Ñ–∏–∫
        used_bytes = user.get('usedTrafficBytes', 0)
        limit_bytes = user.get('trafficLimitBytes', 0)
        used_traffic = user_fmt.format_bytes(used_bytes)
        limit_traffic = user_fmt.format_bytes(limit_bytes) if limit_bytes > 0 else "–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
        if limit_bytes > 0:
            usage_percent = (used_bytes / limit_bytes * 100)
            progress_bar = user_fmt.progress_bar(usage_percent, width=10)
            traffic_info = f"{used_traffic} / {limit_traffic}\n   {progress_bar} {usage_percent:.1f}%"
        else:
            traffic_info = f"{used_traffic} / –ë–µ–∑–ª–∏–º–∏—Ç"
        
        # –î–∞—Ç—ã
        created_at = user.get('createdAt')
        expire_at = user.get('expireAt')
        
        if created_at:
            try:
                created_dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                created_str = created_dt.strftime('%d.%m.%Y %H:%M')
            except:
                created_str = 'N/A'
        else:
            created_str = 'N/A'
        
        if expire_at:
            try:
                expire_dt = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
                expire_str = expire_dt.strftime('%d.%m.%Y %H:%M')
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                now = datetime.now(timezone.utc)
                if expire_dt.tzinfo is None:
                    expire_dt = expire_dt.replace(tzinfo=timezone.utc)
                    
                if expire_dt > now:
                    time_left = expire_dt - now
                    days_left = time_left.days
                    hours_left = time_left.seconds // 3600
                    expire_info = f"{expire_str}\n   ‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω. {hours_left} —á."
                else:
                    expire_info = f"{expire_str}\n   ‚ö†Ô∏è <b>–ò—Å—Ç—ë–∫</b>"
            except:
                expire_info = 'N/A'
        else:
            expire_info = '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
        
        # –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
        online = user.get('online', False)
        online_emoji = "üü¢" if online else "‚ö´"
        online_status = "–û–Ω–ª–∞–π–Ω" if online else "–û—Ñ—Ñ–ª–∞–π–Ω"
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        try:
            devices_response = await api_client.get_user_devices(user_uuid)
            devices_count = len(devices_response.get('response', []))
        except:
            devices_count = 0
        
        text = f"""
üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}
üîë <b>UUID:</b> <code>{user_uuid}</code>

<b>üìà –°—Ç–∞—Ç—É—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
   –°—Ç–∞—Ç—É—Å: {user_fmt.status_badge(status)} {status}
   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {online_emoji} {online_status}
   –£—Å—Ç—Ä–æ–π—Å—Ç–≤: üì± {devices_count}

<b>üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞:</b>
   {traffic_info}

<b>üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:</b>
   –°–æ–∑–¥–∞–Ω: {created_str}
   –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_info}

<b>üíæ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
   ID –ø–æ–¥–ø–∏—Å–∫–∏: <code>{user.get('subscriptionId', 'N/A')}</code>
   –¢–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞: {user.get('trafficLimitStrategy', 'N/A')}
        """
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error fetching user stats: {e.message}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e.message}",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error fetching user stats")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def user_devices_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user devices with HWID information"""
    query = update.callback_query
    await query.answer()
    
    user_uuid = query.data.split(":")[1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_response = await api_client.get_user(user_uuid)
        user = user_response.get('response', {})
        username = user.get('username', 'N/A')
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        devices_response = await api_client.get_user_devices(user_uuid)
        response_data = devices_response.get('response', {})
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'total': N, 'devices': [...]}
        devices = response_data.get('devices', [])
        total_devices = response_data.get('total', 0)
        
        text = f"üì± <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}\n"
        text += f"üîë <b>UUID:</b> <code>{user_uuid}</code>\n\n"
        
        if not devices or total_devices == 0:
            text += "‚ùå <b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b>\n\n"
            text += "<i>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN</i>"
        else:
            text += f"<b>–í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</b> {len(devices)}\n\n"
            
            for idx, device in enumerate(devices, 1):
                hwid = device.get('hwid', 'N/A')
                device_uuid = device.get('uuid', 'N/A')
                created_at = device.get('createdAt')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
                if created_at:
                    try:
                        created_dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        created_str = created_dt.strftime('%d.%m.%Y %H:%M')
                    except:
                        created_str = 'N/A'
                else:
                    created_str = 'N/A'
                
                text += f"<b>üîπ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ #{idx}</b>\n"
                text += f"   HWID: <code>{hwid[:32]}...</code>\n"
                text += f"   UUID: <code>{device_uuid}</code>\n"
                text += f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: {created_str}\n\n"
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=user_kb.user_devices_actions(user_uuid, has_devices=total_devices > 0),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error fetching devices: {e.message}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e.message}",
            reply_markup=user_kb.user_devices_actions(user_uuid, has_devices=False),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error fetching devices")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b>",
            reply_markup=user_kb.user_devices_actions(user_uuid, has_devices=False),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def user_clear_devices_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Confirm clearing all user devices"""
    query = update.callback_query
    await query.answer()
    
    user_uuid = query.data.split(":")[1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        user_response = await api_client.get_user(user_uuid)
        user = user_response.get('response', {})
        username = user.get('username', 'N/A')
        
        devices_response = await api_client.get_user_devices(user_uuid)
        response_data = devices_response.get('response', {})
        total_devices = response_data.get('total', 0)
        
        if total_devices == 0:
            await query.edit_message_text(
                "‚ùå <b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
                reply_markup=user_kb.user_devices_actions(user_uuid, has_devices=False),
                parse_mode=ParseMode.HTML
            )
            return
        
        text = f"""
‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}
üì± <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤:</b> {total_devices}

<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞?</b>

<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>
        """
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=user_kb.clear_devices_confirmation(user_uuid, total_devices),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error confirming device clearing: {e.message}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e.message}",
            reply_markup=user_kb.user_devices_actions(user_uuid, has_devices=False),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error confirming device clearing")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=user_kb.user_devices_actions(user_uuid, has_devices=False),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def user_clear_devices_execute_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Execute clearing all user devices"""
    query = update.callback_query
    await query.answer()
    
    user_uuid = query.data.split(":")[1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices_response = await api_client.get_user_devices(user_uuid)
        response_data = devices_response.get('response', {})
        devices = response_data.get('devices', [])
        total_devices = response_data.get('total', 0)
        
        if not devices or total_devices == 0:
            await query.edit_message_text(
                "‚ùå <b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
                reply_markup=user_kb.user_devices_actions(user_uuid, has_devices=False),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_text = f"üîÑ <b>–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...</b>\n\n–£–¥–∞–ª–µ–Ω–æ: 0 / {total_devices}"
        await query.edit_message_text(
            progress_text,
            parse_mode=ParseMode.HTML
        )
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        deleted_count = 0
        failed_count = 0
        
        for idx, device in enumerate(devices, 1):
            hwid = device.get('hwid')
            if hwid:
                try:
                    await api_client.delete_device(user_uuid, hwid)
                    deleted_count += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º
                    if idx % 3 == 0 or idx == total_devices:
                        progress_text = f"üîÑ <b>–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...</b>\n\n–£–¥–∞–ª–µ–Ω–æ: {deleted_count} / {total_devices}"
                        if failed_count > 0:
                            progress_text += f"\n‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                        await query.edit_message_text(
                            progress_text,
                            parse_mode=ParseMode.HTML
                        )
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.1)
                except Exception as e:
                    log.error(f"Failed to delete device {hwid}: {e}")
                    failed_count += 1
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_text = f"""
‚úÖ <b>–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚îú –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}
‚îî –û—à–∏–±–æ–∫: {failed_count}

<b>–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {total_devices}
        """
        
        await query.edit_message_text(
            result_text.strip(),
            reply_markup=user_kb.user_devices_actions(user_uuid, has_devices=False),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error clearing devices: {e.message}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e.message}",
            reply_markup=user_kb.user_devices_actions(user_uuid, has_devices=False),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error clearing devices")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b>",
            reply_markup=user_kb.user_devices_actions(user_uuid, has_devices=False),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def user_edit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start user editing conversation"""
    query = update.callback_query
    await query.answer()
    
    user_uuid = query.data.split(":")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ context
    context.user_data['editing_user_uuid'] = user_uuid
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_response = await api_client.get_user(user_uuid)
        user = user_response.get('response', {})
        context.user_data['current_user_data'] = user
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        username = user.get('username', 'N/A')
        traffic_limit = user.get('trafficLimitBytes', 0)
        traffic_limit_gb = traffic_limit / (1024**3) if traffic_limit else 0
        status = user.get('status', 'N/A')
        expire = user.get('expireAt', 'N/A')
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data=f"edit_traffic:{user_uuid}")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è", callback_data=f"edit_expire:{user_uuid}")],
            [InlineKeyboardButton("üîÑ –°—Ç–∞—Ç—É—Å", callback_data=f"edit_status:{user_uuid}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"user_view:{user_uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}
üìä <b>–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç:</b> {traffic_limit_gb:.2f} GB
üìÖ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {expire}
üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {status}

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
        """
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
        return EDIT_CHOOSING
        
    except RemnaWaveAPIError as e:
        log.error(f"Error fetching user for editing: {e.message}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e.message}",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END
    except Exception as e:
        log.exception("Unexpected error starting user edit")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END


@admin_only
async def edit_traffic_limit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ask for new traffic limit"""
    query = update.callback_query
    await query.answer()
    
    user_uuid = query.data.split(":")[1]
    user = context.user_data.get('current_user_data', {})
    username = user.get('username', 'N/A')
    current_limit = user.get('trafficLimitBytes', 0) / (1024**3)
    
    text = f"""
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}
üìä <b>–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç:</b> {current_limit:.2f} GB

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ GB:
(0 = –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π)
    """
    
    keyboard = [[InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data=f"user_edit:{user_uuid}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    return EDIT_TRAFFIC_LIMIT


@admin_only
async def edit_traffic_limit_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process new traffic limit"""
    user_uuid = context.user_data.get('editing_user_uuid')
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        traffic_gb = float(update.message.text.strip())
        if traffic_gb < 0:
            await update.message.reply_text(
                "‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                parse_mode=ParseMode.HTML
            )
            return EDIT_TRAFFIC_LIMIT
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        traffic_bytes = int(traffic_gb * (1024**3)) if traffic_gb > 0 else 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_data = {
            "trafficLimitBytes": traffic_bytes
        }
        await api_client.update_user(user_uuid, update_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_response = await api_client.get_user(user_uuid)
        user = user_response.get('response', {})
        
        text = f"""
‚úÖ <b>–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.get('username', 'N/A')}
üìä <b>–ù–æ–≤—ã–π –ª–∏–º–∏—Ç:</b> {traffic_gb:.2f} GB
        """
        
        await update.message.reply_text(
            text.strip(),
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 0):",
            parse_mode=ParseMode.HTML
        )
        return EDIT_TRAFFIC_LIMIT
    except RemnaWaveAPIError as e:
        log.error(f"Error updating traffic limit: {e.message}")
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e.message}",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END
    except Exception as e:
        log.exception("Unexpected error updating traffic limit")
        await update.message.reply_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END


@admin_only
async def edit_expire_date_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ask for new expire date"""
    query = update.callback_query
    await query.answer()
    
    user_uuid = query.data.split(":")[1]
    user = context.user_data.get('current_user_data', {})
    username = user.get('username', 'N/A')
    
    # –ö–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data=f"set_expire:7:{user_uuid}")],
        [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data=f"set_expire:30:{user_uuid}")],
        [InlineKeyboardButton("90 –¥–Ω–µ–π", callback_data=f"set_expire:90:{user_uuid}")],
        [InlineKeyboardButton("180 –¥–Ω–µ–π", callback_data=f"set_expire:180:{user_uuid}")],
        [InlineKeyboardButton("365 –¥–Ω–µ–π", callback_data=f"set_expire:365:{user_uuid}")],
        [InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data=f"user_edit:{user_uuid}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""
üìÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    return EDIT_EXPIRE_DATE


@admin_only
async def edit_expire_date_preset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set expire date from preset"""
    query = update.callback_query
    await query.answer()
    
    _, days_str, user_uuid = query.data.split(":")
    days = int(days_str)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_response = await api_client.get_user(user_uuid)
        user = user_response.get('response', {})
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
        current_expire_str = user.get('expireAt')
        if current_expire_str:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
            try:
                current_expire = datetime.fromisoformat(str(current_expire_str).replace('Z', '+00:00'))
            except (ValueError, AttributeError):
                current_expire = datetime.now(timezone.utc)
        else:
            current_expire = datetime.now(timezone.utc)
        
        # –ï—Å–ª–∏ —Å—Ä–æ–∫ —É–∂–µ –∏—Å—Ç—ë–∫, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        if current_expire < datetime.now(timezone.utc):
            new_expire = datetime.now(timezone.utc) + timedelta(days=days)
        else:
            new_expire = current_expire + timedelta(days=days)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_data = {
            "expireAt": new_expire.isoformat()
        }
        await api_client.update_user(user_uuid, update_data)
        
        text = f"""
‚úÖ <b>–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.get('username', 'N/A')}
üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–Ω–µ–π:</b> {days}
üìÖ <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b> {new_expire.strftime('%Y-%m-%d %H:%M')}
        """
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        
        return ConversationHandler.END
        
    except RemnaWaveAPIError as e:
        log.error(f"Error updating expire date: {e.message}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e.message}",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END
    except Exception as e:
        log.exception("Unexpected error updating expire date")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END


@admin_only
async def edit_status_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ask for new status"""
    query = update.callback_query
    await query.answer()
    
    user_uuid = query.data.split(":")[1]
    user = context.user_data.get('current_user_data', {})
    username = user.get('username', 'N/A')
    current_status = user.get('status', 'N/A')
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ ACTIVE", callback_data=f"set_status:ACTIVE:{user_uuid}")],
        [InlineKeyboardButton("‚ùå DISABLED", callback_data=f"set_status:DISABLED:{user_uuid}")],
        [InlineKeyboardButton("‚è∏Ô∏è LIMITED", callback_data=f"set_status:LIMITED:{user_uuid}")],
        [InlineKeyboardButton("‚è∞ EXPIRED", callback_data=f"set_status:EXPIRED:{user_uuid}")],
        [InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data=f"user_edit:{user_uuid}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""
üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}
üîÑ <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {current_status}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    return EDIT_STATUS


@admin_only
async def edit_status_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process status change"""
    query = update.callback_query
    await query.answer()
    
    _, new_status, user_uuid = query.data.split(":")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        update_data = {
            "status": new_status
        }
        await api_client.update_user(user_uuid, update_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_response = await api_client.get_user(user_uuid)
        user = user_response.get('response', {})
        
        status_emoji = {
            'ACTIVE': '‚úÖ',
            'DISABLED': '‚ùå',
            'LIMITED': '‚è∏Ô∏è',
            'EXPIRED': '‚è∞'
        }
        
        text = f"""
‚úÖ <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.get('username', 'N/A')}
üîÑ <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {status_emoji.get(new_status, '')} {new_status}
        """
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        
        return ConversationHandler.END
        
    except RemnaWaveAPIError as e:
        log.error(f"Error updating status: {e.message}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e.message}",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END
    except Exception as e:
        log.exception("Unexpected error updating status")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=user_kb.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END


@admin_only
async def edit_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel editing"""
    query = update.callback_query
    if query:
        await query.answer()
        user_uuid = context.user_data.get('editing_user_uuid')
        if user_uuid:
            await query.edit_message_text(
                "‚ùå <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
                reply_markup=user_kb.user_actions(user_uuid),
                parse_mode=ParseMode.HTML
            )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END


@admin_only
async def user_create_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start user creation process"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    context.user_data.clear()
    
    text = """
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

–®–∞–≥ 1 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</i>
‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ
‚Ä¢ –î–ª–∏–Ω–∞ –æ—Ç 3 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤

–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:
    """
    
    await query.edit_message_text(
        text.strip(),
        parse_mode=ParseMode.HTML
    )
    
    return CREATE_USERNAME


@admin_only
async def create_username_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process username input"""
    username = update.message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è username
    if not username or len(username) < 3 or len(username) > 32:
        await update.message.reply_text(
            "‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            parse_mode=ParseMode.HTML
        )
        return CREATE_USERNAME
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    import re
    if not re.match(r'^[a-zA-Z0-9_-]+$', username):
        await update.message.reply_text(
            "‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            parse_mode=ParseMode.HTML
        )
        return CREATE_USERNAME
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username
    context.user_data['create_username'] = username
    
    text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

‚úÖ –ò–º—è: <code>{username}</code>

–®–∞–≥ 2 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ GB

<i>–ü—Ä–∏–º–µ—Ä—ã:</i>
‚Ä¢ 100 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç 100 GB
‚Ä¢ 0 - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫

–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:
    """
    
    await update.message.reply_text(
        text.strip(),
        parse_mode=ParseMode.HTML
    )
    
    return CREATE_TRAFFIC_LIMIT


@admin_only
async def create_traffic_limit_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process traffic limit input"""
    try:
        traffic_gb = float(update.message.text.strip())
        
        if traffic_gb < 0:
            await update.message.reply_text(
                "‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                parse_mode=ParseMode.HTML
            )
            return CREATE_TRAFFIC_LIMIT
        
        traffic_bytes = int(traffic_gb * 1024 * 1024 * 1024) if traffic_gb > 0 else 0
        context.user_data['create_traffic_limit'] = traffic_bytes
        
        username = context.user_data.get('create_username')
        traffic_str = f"{traffic_gb:.2f} GB" if traffic_gb > 0 else "–ë–µ–∑–ª–∏–º–∏—Ç"
        
        text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

‚úÖ –ò–º—è: <code>{username}</code>
‚úÖ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_str}

–®–∞–≥ 3 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö

<i>–ü—Ä–∏–º–µ—Ä—ã:</i>
‚Ä¢ 30 - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π
‚Ä¢ 365 - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥
‚Ä¢ 0 - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:
        """
        
        await update.message.reply_text(
            text.strip(),
            parse_mode=ParseMode.HTML
        )
        
        return CREATE_EXPIRE_DAYS
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 0):",
            parse_mode=ParseMode.HTML
        )
        return CREATE_TRAFFIC_LIMIT


@admin_only
async def create_expire_days_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process expire days input"""
    try:
        days = int(update.message.text.strip())
        
        if days < 0:
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                parse_mode=ParseMode.HTML
            )
            return CREATE_EXPIRE_DAYS
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
        if days > 0:
            expire_date = datetime.now(timezone.utc) + timedelta(days=days)
            context.user_data['create_expire_at'] = expire_date.isoformat()
            expire_str = expire_date.strftime('%d.%m.%Y %H:%M')
        else:
            # –î–ª—è "–±–µ—Å—Å—Ä–æ—á–Ω—ã—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ 100 –ª–µ—Ç
            expire_date = datetime.now(timezone.utc) + timedelta(days=36500)
            context.user_data['create_expire_at'] = expire_date.isoformat()
            expire_str = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (~100 –ª–µ—Ç)"
        
        username = context.user_data.get('create_username')
        traffic_bytes = context.user_data.get('create_traffic_limit', 0)
        traffic_str = user_fmt.format_bytes(traffic_bytes) if traffic_bytes > 0 else "–ë–µ–∑–ª–∏–º–∏—Ç"
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="create_confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="create_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""
‚ûï <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>

üë§ –ò–º—è: <code>{username}</code>
üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_str}
üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expire_str}
üîÑ –°—Ç–∞—Ç—É—Å: ACTIVE

–í—Å—ë –≤–µ—Ä–Ω–æ?
        """
        
        await update.message.reply_text(
            text.strip(),
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
        return CREATE_CONFIRM
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:",
            parse_mode=ParseMode.HTML
        )
        return CREATE_EXPIRE_DAYS


@admin_only
async def create_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Confirm and create user"""
    query = update.callback_query
    await query.answer()
    
    try:
        username = context.user_data.get('create_username')
        traffic_limit = context.user_data.get('create_traffic_limit', 0)
        expire_at = context.user_data.get('create_expire_at')
        
        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        # expire_at –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ SDK (snake_case!)
        user_data = {
            "username": username,
            "traffic_limit_bytes": traffic_limit,
            "expire_at": expire_at,  # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞—ë–º, —Ç–∞–∫ –∫–∞–∫ SDK —Ç—Ä–µ–±—É–µ—Ç —ç—Ç–æ –ø–æ–ª–µ
            "status": "ACTIVE"
        }
        
        await query.edit_message_text(
            "‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
            parse_mode=ParseMode.HTML
        )
        
        result = await api_client.create_user(user_data)
        created_user = result.get('response', {})
        
        text = f"""
‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

üë§ <b>–ò–º—è:</b> {created_user.get('username', 'N/A')}
üîë <b>UUID:</b> <code>{created_user.get('uuid', 'N/A')}</code>
üìä <b>–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:</b> {user_fmt.format_bytes(traffic_limit) if traffic_limit > 0 else '–ë–µ–∑–ª–∏–º–∏—Ç'}
üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {created_user.get('status', 'N/A')}
        """
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        context.user_data.clear()
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=user_kb.users_menu(),
            parse_mode=ParseMode.HTML
        )
        
        return ConversationHandler.END
        
    except RemnaWaveAPIError as e:
        log.error(f"Error creating user: {e.message}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {e.message}",
            reply_markup=user_kb.users_menu(),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END
    except Exception as e:
        log.exception("Unexpected error creating user")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>",
            reply_markup=user_kb.users_menu(),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END


@admin_only
async def create_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel user creation"""
    query = update.callback_query
    await query.answer()
    
    context.user_data.clear()
    
    await query.edit_message_text(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        reply_markup=user_kb.users_menu(),
        parse_mode=ParseMode.HTML
    )
    
    return ConversationHandler.END


@admin_only
async def create_cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel user creation via /cancel command"""
    context.user_data.clear()
    
    await update.message.reply_text(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        reply_markup=user_kb.users_menu(),
        parse_mode=ParseMode.HTML
    )
    
    return ConversationHandler.END


@admin_only
async def user_search_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start user search"""
    query = update.callback_query
    await query.answer()
    
    text = """
üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞:

‚Ä¢ <b>Username</b> (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
‚Ä¢ <b>UUID</b> (–ø–æ–ª–Ω—ã–π –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π)
‚Ä¢ <b>Email</b>
‚Ä¢ <b>Telegram ID</b>

–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:
    """
    
    await query.edit_message_text(
        text.strip(),
        parse_mode=ParseMode.HTML
    )
    
    return SEARCH_INPUT


@admin_only
async def user_search_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process search query"""
    search_query = update.message.text.strip()
    
    if not search_query:
        await update.message.reply_text(
            "‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            parse_mode=ParseMode.HTML
        )
        return SEARCH_INPUT
    
    try:
        await update.message.reply_text(
            f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{search_query}</code>...",
            parse_mode=ParseMode.HTML
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ UUID
        user = None
        try:
            user_response = await api_client.get_user(search_query)
            user = user_response.get('response')
        except:
            pass
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ UUID, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫
        if not user:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—â–µ–º –ø–æ username/email
                users_response = await api_client.get_users(page=1, limit=1000)
                all_users = users_response.get('response', {}).get('users', [])
                
                # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ)
                search_lower = search_query.lower()
                found_users = []
                
                for u in all_users:
                    username = (u.get('username') or '').lower()
                    email = (u.get('email') or '').lower()
                    telegram_id = str(u.get('telegramId') or '')
                    short_uuid = u.get('shortUuid') or ''
                    
                    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    if (username == search_lower or
                        email == search_lower or
                        telegram_id == search_query or
                        short_uuid == search_query):
                        user = u
                        break
                    
                    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ
                    if (search_lower in username or
                        search_lower in email or
                        search_query in telegram_id or
                        search_query in short_uuid):
                        found_users.append(u)
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ
                if not user and found_users:
                    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
                    if len(found_users) == 1:
                        user = found_users[0]
                    else:
                        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                        text = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(found_users)}\n\n–ó–∞–ø—Ä–æ—Å: <code>{search_query}</code>\n\n"
                        
                        keyboard = []
                        for u in found_users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                            username = u.get('username', 'N/A')
                            status_emoji = user_fmt.status_badge(u.get('status', ''))
                            short_uuid = u.get('shortUuid', '')[:8]
                            
                            button_text = f"{status_emoji} {username} ({short_uuid})"
                            keyboard.append([
                                InlineKeyboardButton(
                                    button_text,
                                    callback_data=f"user_view_{u.get('uuid')}"
                                )
                            ])
                        
                        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users_list")])
                        
                        if len(found_users) > 10:
                            text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(found_users)}. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>"
                        
                        await update.message.reply_text(
                            text,
                            reply_markup=InlineKeyboardMarkup(keyboard),
                            parse_mode=ParseMode.HTML
                        )
                        return ConversationHandler.END
                    
            except Exception as e:
                log.error(f"Error searching users: {e}")
        
        if user:
            user_uuid = user.get('uuid')
            username = user.get('username', 'N/A')
            status = user.get('status', 'unknown').upper()
            
            # Get HWID count
            hwid_count = 0
            try:
                hwid_response = await api_client.get_user_devices(user_uuid)
                response_data = hwid_response.get('response', {})
                # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'total': N, 'devices': [...]}
                hwid_count = response_data.get('total', 0)
            except Exception as e:
                log.warning(f"Failed to get HWID count: {e}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            text = f"""
‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!</b>

{user_fmt.format_user_full(user, hwid_count=hwid_count)}
            """
            
            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = user_kb.user_actions(user_uuid)
            
            await update.message.reply_text(
                text.strip(),
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n–ó–∞–ø—Ä–æ—Å: <code>{search_query}</code>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                reply_markup=user_kb.users_menu(),
                parse_mode=ParseMode.HTML
            )
            return SEARCH_INPUT
            
    except RemnaWaveAPIError as e:
        log.error(f"Error searching user: {e.message}")
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:</b> {e.message}",
            reply_markup=user_kb.users_menu(),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END
    except Exception as e:
        log.exception("Unexpected error searching user")
        await update.message.reply_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ</b>",
            reply_markup=user_kb.users_menu(),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END


@admin_only
async def search_cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel search via /cancel command"""
    await update.message.reply_text(
        "‚ùå <b>–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω</b>",
        reply_markup=user_kb.users_menu(),
        parse_mode=ParseMode.HTML
    )
    
    return ConversationHandler.END


# ============================================================================
# BULK USER CREATION WITH PRESETS
# ============================================================================

import random
import string
import asyncio

def generate_random_username(length=12):
    """Generate random username with letters and digits"""
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(length))


@admin_only
async def bulk_create_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start bulk user creation with presets"""
    query = update.callback_query
    await query.answer()
    
    max_bulk = settings.max_bulk_create
    
    keyboard = [
        [InlineKeyboardButton(f"{i}", callback_data=f"bulk_count_{i}")]
        for i in [5, 10, 15, max_bulk]
    ]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users_list")])
    
    await query.edit_message_text(
        f"<b>üì¶ –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        f"–ë—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ (12 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–∞–∫—Å. {max_bulk}):",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return BULK_COUNT


@admin_only
async def bulk_count_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process user count selection"""
    query = update.callback_query
    await query.answer()
    
    count = int(query.data.split("_")[2])
    context.user_data['bulk_count'] = count
    
    keyboard = [
        [InlineKeyboardButton("‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç", callback_data="bulk_duration_unlimited")],
        [
            InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data="bulk_duration_1"),
            InlineKeyboardButton("2 –º–µ—Å—è—Ü–∞", callback_data="bulk_duration_2"),
        ],
        [
            InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data="bulk_duration_3"),
            InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤", callback_data="bulk_duration_6"),
        ],
        [InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤", callback_data="bulk_duration_12")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users_list")]
    ]
    
    await query.edit_message_text(
        f"<b>üì¶ –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: {count} –ø–æ–ª—å–∑.</b>\n\n"
        f"<b>–®–∞–≥ 1/3:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return BULK_DURATION


@admin_only
async def bulk_duration_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process duration selection"""
    query = update.callback_query
    await query.answer()
    
    duration_str = query.data.split("_")[2]
    context.user_data['bulk_duration'] = duration_str
    
    count = context.user_data.get('bulk_count')
    
    if duration_str == "unlimited":
        duration_text = "‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç (~100 –ª–µ—Ç)"
    else:
        months = int(duration_str)
        duration_text = f"{months} –º–µ—Å."
    
    keyboard = [
        [InlineKeyboardButton("‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç", callback_data="bulk_traffic_unlimited")],
        [
            InlineKeyboardButton("100 –ì–ë", callback_data="bulk_traffic_100"),
            InlineKeyboardButton("400 –ì–ë", callback_data="bulk_traffic_400"),
        ],
        [
            InlineKeyboardButton("800 –ì–ë", callback_data="bulk_traffic_800"),
            InlineKeyboardButton("1000 –ì–ë", callback_data="bulk_traffic_1000"),
        ],
        [InlineKeyboardButton("2000 –ì–ë", callback_data="bulk_traffic_2000")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users_list")]
    ]
    
    await query.edit_message_text(
        f"<b>üì¶ –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: {count} –ø–æ–ª—å–∑.</b>\n\n"
        f"<b>–®–∞–≥ 2/3:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:\n"
        f"‚îú –°—Ä–æ–∫: {duration_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return BULK_TRAFFIC


@admin_only
async def bulk_traffic_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process traffic limit selection"""
    query = update.callback_query
    await query.answer()
    
    traffic_str = query.data.split("_")[2]
    context.user_data['bulk_traffic'] = traffic_str
    
    count = context.user_data.get('bulk_count')
    duration_str = context.user_data.get('bulk_duration')
    
    if duration_str == "unlimited":
        duration_text = "‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç"
    else:
        duration_text = f"{duration_str} –º–µ—Å."
    
    if traffic_str == "unlimited":
        traffic_text = "‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç"
        # –ï—Å–ª–∏ —Ç—Ä–∞—Ñ–∏–∫ –±–µ–∑–ª–∏–º–∏—Ç, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        context.user_data['bulk_reset'] = None
        return await bulk_confirm_show(update, context)
    else:
        traffic_text = f"{traffic_str} –ì–ë"
    
    # –ï—Å–ª–∏ —Ç—Ä–∞—Ñ–∏–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø–µ—Ä–∏–æ–¥ —Å–±—Ä–æ—Å–∞
    keyboard = [
        [InlineKeyboardButton("üö´ –ë–µ–∑ —Å–±—Ä–æ—Å–∞", callback_data="bulk_reset_NO_RESET")],
        [InlineKeyboardButton("üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="bulk_reset_DAY")],
        [InlineKeyboardButton("üìÖ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é", callback_data="bulk_reset_WEEK")],
        [InlineKeyboardButton("üìÖ –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü", callback_data="bulk_reset_MONTH")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users_list")]
    ]
    
    await query.edit_message_text(
        f"<b>üì¶ –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: {count} –ø–æ–ª—å–∑.</b>\n\n"
        f"<b>–®–∞–≥ 3/3:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞:\n"
        f"‚îú –°—Ä–æ–∫: {duration_text}\n"
        f"‚îî –¢—Ä–∞—Ñ–∏–∫: {traffic_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return BULK_RESET


@admin_only
async def bulk_reset_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process reset strategy selection"""
    query = update.callback_query
    await query.answer()
    
    reset_str = query.data.split("_")[2]
    context.user_data['bulk_reset'] = reset_str
    
    return await bulk_confirm_show(update, context)


async def bulk_confirm_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show confirmation before bulk creation"""
    query = update.callback_query
    
    count = context.user_data.get('bulk_count')
    duration_str = context.user_data.get('bulk_duration')
    traffic_str = context.user_data.get('bulk_traffic')
    reset_str = context.user_data.get('bulk_reset')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if duration_str == "unlimited":
        duration_text = "‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç (~100 –ª–µ—Ç)"
    else:
        months = int(duration_str)
        duration_text = f"{months} –º–µ—Å—è—Ü(–µ–≤)"
    
    if traffic_str == "unlimited":
        traffic_text = "‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç"
        reset_text = "‚Äî"
    else:
        traffic_gb = int(traffic_str)
        traffic_text = f"{traffic_gb} –ì–ë ({traffic_gb * 1024**3:,} –±–∞–π—Ç)"
        
        reset_names = {
            "NO_RESET": "üö´ –ë–µ–∑ —Å–±—Ä–æ—Å–∞",
            "DAY": "üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "WEEK": "üìÖ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é",
            "MONTH": "üìÖ –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü"
        }
        reset_text = reset_names.get(reset_str, reset_str)
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="bulk_create_confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users_list")]
    ]
    
    text = f"""
<b>üì¶ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è</b>

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
<b>–ò–º–µ–Ω–∞:</b> –°–ª—É—á–∞–π–Ω—ã–µ (12 —Å–∏–º–≤–æ–ª–æ–≤)

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚îú –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {duration_text}
‚îú –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_text}
‚îî –ü–µ—Ä–∏–æ–¥ —Å–±—Ä–æ—Å–∞: {reset_text}

<b>–°—Ç–∞—Ç—É—Å:</b> ACTIVE

‚ö†Ô∏è –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ {count} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return BULK_CONFIRM


@admin_only
async def bulk_create_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Execute bulk user creation"""
    query = update.callback_query
    await query.answer()
    
    count = context.user_data.get('bulk_count')
    duration_str = context.user_data.get('bulk_duration')
    traffic_str = context.user_data.get('bulk_traffic')
    reset_str = context.user_data.get('bulk_reset')
    
    await query.edit_message_text(
        f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∏–µ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</b>\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        parse_mode=ParseMode.HTML
    )
    
    try:
        # –†–∞—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if duration_str == "unlimited":
            expire_date = datetime.now(timezone.utc) + timedelta(days=36500)  # ~100 –ª–µ—Ç
        else:
            months = int(duration_str)
            expire_date = datetime.now(timezone.utc) + timedelta(days=30 * months)
        
        expire_at = expire_date.isoformat()
        
        if traffic_str == "unlimited":
            traffic_limit = 0
            traffic_strategy = None
        else:
            traffic_gb = int(traffic_str)
            traffic_limit = traffic_gb * 1024**3  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –±–∞–π—Ç—ã
            traffic_strategy = reset_str
        
        # –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        created_users = []
        failed_users = []
        
        for i in range(count):
            try:
                username = generate_random_username(12)
                
                user_data = {
                    "username": username,
                    "traffic_limit_bytes": traffic_limit,
                    "expire_at": expire_at,
                    "status": "ACTIVE"
                }
                
                if traffic_strategy:
                    user_data["traffic_limit_strategy"] = traffic_strategy
                
                result = await api_client.create_user(user_data)
                created_user = result.get('response', {})
                created_users.append(created_user.get('username'))
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                log.error(f"Error creating user {username}: {e}")
                failed_users.append(f"{username}: {str(e)}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        success_count = len(created_users)
        failed_count = len(failed_users)
        
        text = f"<b>‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
        text += f"<b>–°–æ–∑–¥–∞–Ω–æ:</b> {success_count}/{count}\n"
        
        if failed_count > 0:
            text += f"<b>–û—à–∏–±–æ–∫:</b> {failed_count}\n\n"
        
        if created_users:
            text += f"\n<b>–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 –∏–º—ë–Ω
            shown_users = created_users[:20]
            text += "\n".join([f"‚Ä¢ <code>{u}</code>" for u in shown_users])
            
            if len(created_users) > 20:
                text += f"\n\n<i>... –∏ –µ—â—ë {len(created_users) - 20}</i>"
        
        if failed_users and failed_count <= 5:
            text += f"\n\n<b>–û—à–∏–±–∫–∏:</b>\n"
            text += "\n".join([f"‚Ä¢ {f}" for f in failed_users])
        
        context.user_data.clear()
        
        await query.edit_message_text(
            text,
            reply_markup=user_kb.users_menu(),
            parse_mode=ParseMode.HTML
        )
        
        return ConversationHandler.END
        
    except Exception as e:
        log.exception("Error in bulk user creation")
        context.user_data.clear()
        
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {str(e)}",
            reply_markup=user_kb.users_menu(),
            parse_mode=ParseMode.HTML
        )
        
        return ConversationHandler.END


@admin_only
async def bulk_create_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel bulk creation"""
    query = update.callback_query
    await query.answer()
    
    context.user_data.clear()
    
    await query.edit_message_text(
        "‚ùå <b>–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        reply_markup=user_kb.users_menu(),
        parse_mode=ParseMode.HTML
    )
    
    return ConversationHandler.END


def register_users_handlers(application):
    """Register all user management handlers"""
    
    # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    edit_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(user_edit_callback, pattern="^user_edit:")
        ],
        states={
            EDIT_CHOOSING: [
                CallbackQueryHandler(edit_traffic_limit_start, pattern="^edit_traffic:"),
                CallbackQueryHandler(edit_expire_date_start, pattern="^edit_expire:"),
                CallbackQueryHandler(edit_status_start, pattern="^edit_status:"),
            ],
            EDIT_TRAFFIC_LIMIT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_traffic_limit_process),
                CallbackQueryHandler(edit_cancel, pattern="^user_edit:"),
            ],
            EDIT_EXPIRE_DATE: [
                CallbackQueryHandler(edit_expire_date_preset, pattern="^set_expire:"),
                CallbackQueryHandler(edit_cancel, pattern="^user_edit:"),
            ],
            EDIT_STATUS: [
                CallbackQueryHandler(edit_status_process, pattern="^set_status:"),
                CallbackQueryHandler(edit_cancel, pattern="^user_edit:"),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(edit_cancel, pattern="^user_view:"),
        ],
        per_message=False,
        allow_reentry=True
    )
    
    application.add_handler(edit_conv_handler)
    
    # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(user_create_start, pattern="^user_create$")
        ],
        states={
            CREATE_USERNAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, create_username_process),
            ],
            CREATE_TRAFFIC_LIMIT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, create_traffic_limit_process),
            ],
            CREATE_EXPIRE_DAYS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, create_expire_days_process),
            ],
            CREATE_CONFIRM: [
                CallbackQueryHandler(create_confirm_callback, pattern="^create_confirm$"),
                CallbackQueryHandler(create_cancel_callback, pattern="^create_cancel$"),
            ],
        },
        fallbacks=[
            MessageHandler(filters.Regex("^/cancel$"), create_cancel_command),
        ],
        per_message=False,
        allow_reentry=True
    )
    
    application.add_handler(create_conv_handler)
    
    # ConversationHandler –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    search_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(user_search_start, pattern="^user_search$")
        ],
        states={
            SEARCH_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, user_search_process),
            ],
        },
        fallbacks=[
            MessageHandler(filters.Regex("^/cancel$"), search_cancel_command),
        ],
        per_message=False,
        allow_reentry=True
    )
    
    application.add_handler(search_conv_handler)
    
    # ConversationHandler –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bulk_create_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(bulk_create_start, pattern="^user_bulk_create$")
        ],
        states={
            BULK_COUNT: [
                CallbackQueryHandler(bulk_count_callback, pattern="^bulk_count_"),
            ],
            BULK_DURATION: [
                CallbackQueryHandler(bulk_duration_callback, pattern="^bulk_duration_"),
            ],
            BULK_TRAFFIC: [
                CallbackQueryHandler(bulk_traffic_callback, pattern="^bulk_traffic_"),
            ],
            BULK_RESET: [
                CallbackQueryHandler(bulk_reset_callback, pattern="^bulk_reset_"),
            ],
            BULK_CONFIRM: [
                CallbackQueryHandler(bulk_create_confirm, pattern="^bulk_create_confirm$"),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(bulk_create_cancel, pattern="^users_list$"),
        ],
        per_message=False,
        allow_reentry=True
    )
    
    application.add_handler(bulk_create_conv_handler)
    
    # Import delete handlers
    from .delete_handlers import (
        user_delete_start,
        user_delete_confirm_handler,
        user_delete_cancel
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CallbackQueryHandler(users_menu_callback, pattern="^users_menu$"))
    application.add_handler(CallbackQueryHandler(users_list_callback, pattern="^users_list$"))
    application.add_handler(CallbackQueryHandler(users_list_callback, pattern="^users_page:"))
    application.add_handler(CallbackQueryHandler(user_view_callback, pattern="^user_view:"))
    application.add_handler(CallbackQueryHandler(user_extend_callback, pattern="^user_extend:"))
    application.add_handler(CallbackQueryHandler(extend_user_callback, pattern="^extend:"))
    
    # Smart delete handlers (replacing old PIN-based delete)
    application.add_handler(CallbackQueryHandler(user_delete_start, pattern="^user_delete_confirm:"))
    application.add_handler(CallbackQueryHandler(user_delete_cancel, pattern="^user_delete_cancel:"))
    
    # Additional feature handlers
    application.add_handler(CallbackQueryHandler(user_reset_traffic_callback, pattern="^user_reset_traffic:"))
    application.add_handler(CallbackQueryHandler(user_stats_callback, pattern="^user_stats:"))
    application.add_handler(CallbackQueryHandler(user_devices_callback, pattern="^user_devices:"))
    application.add_handler(CallbackQueryHandler(user_clear_devices_confirm_callback, pattern="^user_clear_devices_confirm:"))
    application.add_handler(CallbackQueryHandler(user_clear_devices_execute_callback, pattern="^user_clear_devices_execute:"))
    
    # Combined message handler for ConversationHandlers and delete confirmation
    async def combined_text_handler(update, context):
        # Check for delete confirmation first
        if context.user_data.get('delete_user_confirmation'):
            await user_delete_confirm_handler(update, context)
            return
        # Old PIN handler no longer needed - removed
    
    # Message handler (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º, –≤ –≥—Ä—É–ø–ø–µ 1 —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏)
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, combined_text_handler),
        group=1
    )
    
    log.info("‚úÖ Users feature handlers registered")

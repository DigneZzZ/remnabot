"""
HWID management handlers
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode

from src.core.logger import log
from src.middleware.auth import admin_only
from src.services.api import api_client, RemnaWaveAPIError

from . import keyboards as hwid_kb
from . import formatters as hwid_fmt


@admin_only
async def hwid_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show HWID management menu"""
    query = update.callback_query
    await query.answer()
    
    text = """
üì± <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=hwid_kb.hwid_menu(),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def hwid_list_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show devices list with interactive buttons"""
    query = update.callback_query
    await query.answer()
    
    try:
        await query.edit_message_text(
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...",
            parse_mode=ParseMode.HTML
        )
        
        response = await api_client.get_devices()
        devices = response.get('response', [])
        
        if not devices:
            text = "üì± <b>–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b>\n\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        else:
            text = f"üì± <b>–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b>\n"
            text += f"<i>–í—Å–µ–≥–æ: {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤</i>\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
            
            # Build keyboard with device buttons
            keyboard = []
            for device in devices:
                hwid = device.get('hwid', 'N/A')
                username = device.get('username', 'N/A')
                
                # Truncate HWID for display
                short_hwid = hwid[:16] + '...' if len(hwid) > 16 else hwid
                button_text = f"üì± {username} | {short_hwid}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"device_view:{hwid}")])
            
            # Add back button
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error fetching devices: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞:</b>\n{str(e)}",
            reply_markup=hwid_kb.hwid_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in devices list")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=hwid_kb.hwid_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def device_view_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show detailed device information"""
    query = update.callback_query
    await query.answer()
    
    try:
        hwid = query.data.split(":", 1)[1]
        
        await query.edit_message_text(
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...",
            parse_mode=ParseMode.HTML
        )
        
        # Fetch device details
        response = await api_client.get_device(hwid)
        device = response.get('response', {})
        
        if not device:
            await query.edit_message_text(
                "‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=hwid_kb.hwid_menu(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # Format device info
        text = hwid_fmt.format_device_full(device)
        
        await query.edit_message_text(
            text,
            reply_markup=hwid_kb.device_actions(hwid),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error fetching device: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{str(e)}",
            reply_markup=hwid_kb.hwid_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in device view")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=hwid_kb.hwid_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def device_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Delete device"""
    query = update.callback_query
    await query.answer()
    
    try:
        hwid = query.data.split(":", 1)[1]
        
        await query.edit_message_text(
            "‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...",
            parse_mode=ParseMode.HTML
        )
        
        await api_client.delete_device(hwid)
        
        await query.edit_message_text(
            "‚úÖ <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ</b>",
            reply_markup=hwid_kb.hwid_menu(),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error deleting device: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:</b>\n{str(e)}",
            reply_markup=hwid_kb.hwid_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in device delete")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
            reply_markup=hwid_kb.hwid_menu(),
            parse_mode=ParseMode.HTML
        )


def register_hwid_handlers(application):
    """Register all HWID management handlers"""
    application.add_handler(CallbackQueryHandler(hwid_menu_callback, pattern="^hwid_menu$"))
    application.add_handler(CallbackQueryHandler(hwid_list_callback, pattern="^hwid_list$"))
    application.add_handler(CallbackQueryHandler(device_view_callback, pattern="^device_view:"))
    application.add_handler(CallbackQueryHandler(device_delete_callback, pattern="^device_delete:"))
    
    log.info("‚úÖ HWID feature handlers registered")

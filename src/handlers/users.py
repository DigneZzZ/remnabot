"""
Users management handlers
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler, ConversationHandler, MessageHandler, filters
from telegram.constants import ParseMode

from src.core.logger import log
from src.core.config import settings
from src.middleware.auth import admin_only
from src.utils.keyboards import keyboards
from src.utils.formatters import formatters
from src.utils.validators import validators
from src.services.api import api_client, RemnaWaveAPIError

# Conversation states
AWAITING_PIN = 1


@admin_only
async def users_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show users management menu"""
    query = update.callback_query
    await query.answer()
    
    text = """
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=keyboards.users_menu(),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def users_list_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show users list"""
    query = update.callback_query
    await query.answer()
    
    # Extract page from callback data
    page = 1
    if ":" in query.data:
        try:
            page = int(query.data.split(":")[1])
        except (IndexError, ValueError):
            page = 1
    
    try:
        await query.edit_message_text(
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            parse_mode=ParseMode.HTML
        )
        
        # Fetch users
        response = await api_client.get_users(page=page, limit=10)
        # API returns data in 'response' wrapper
        data = response.get('response', {})
        users = data.get('users', [])
        total = data.get('total', 0)
        total_pages = (total + 9) // 10  # Ceiling division
        
        if not users:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            keyboard = [[keyboards.back_to_main().inline_keyboard[0][0]]]
        else:
            text = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n"
            text += f"<i>–í—Å–µ–≥–æ: {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
            
            # Build keyboard with user buttons
            keyboard = []
            for user in users:
                username = user.get('username', 'N/A')
                status = user.get('status', 'unknown').upper()
                uuid = user.get('uuid', '')
                
                # Emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = {
                    'ACTIVE': '‚úÖ',
                    'DISABLED': 'üö´',
                    'LIMITED': '‚ö†Ô∏è',
                    'EXPIRED': '‚è±Ô∏è'
                }.get(status, '‚ùì')
                
                button_text = f"{status_emoji} {username}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"user_view:{uuid}")])
            
            # Add pagination if needed
            if total_pages > 1:
                keyboard.append(keyboards.pagination(page, total_pages, "users_page"))
            
            # Add back button
            keyboard.append([keyboards.back_to_main().inline_keyboard[0][0]])
        
        from telegram import InlineKeyboardMarkup
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text.strip(),
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error fetching users: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n{str(e)}",
            reply_markup=keyboards.users_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in users list callback")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>",
            reply_markup=keyboards.users_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def user_view_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show detailed user information"""
    query = update.callback_query
    await query.answer()
    
    try:
        user_uuid = query.data.split(":")[1]
        
        await query.edit_message_text(
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...",
            parse_mode=ParseMode.HTML
        )
        
        # Fetch user details
        response = await api_client.get_user(user_uuid)
        user = response.get('response', {})
        
        if not user:
            await query.edit_message_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=keyboards.users_menu(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # Format user info
        text = formatters.format_user(user)
        
        await query.edit_message_text(
            text,
            reply_markup=keyboards.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error fetching user: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n{str(e)}",
            reply_markup=keyboards.users_menu(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in user view callback")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>",
            reply_markup=keyboards.users_menu(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def user_extend_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show subscription extension presets"""
    query = update.callback_query
    await query.answer()
    
    user_uuid = query.data.split(":")[1]
    
    text = """
üìÖ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=keyboards.extend_presets(user_uuid),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def extend_user_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Extend user subscription"""
    query = update.callback_query
    await query.answer()
    
    try:
        parts = query.data.split(":")
        user_uuid = parts[1]
        days = int(parts[2])
        
        await query.edit_message_text(
            f"‚è≥ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π...",
            parse_mode=ParseMode.HTML
        )
        
        result = await api_client.extend_user_subscription(user_uuid, days)
        
        await query.edit_message_text(
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π</b>",
            reply_markup=keyboards.user_actions(user_uuid),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error extending subscription: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n{str(e)}",
            reply_markup=keyboards.back_to_main(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Unexpected error in extend user callback")
        await query.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>",
            reply_markup=keyboards.back_to_main(),
            parse_mode=ParseMode.HTML
        )


@admin_only
async def user_delete_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show delete confirmation"""
    query = update.callback_query
    await query.answer()
    
    user_uuid = query.data.split(":")[1]
    
    text = """
‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥.
    """
    
    await query.edit_message_text(
        text.strip(),
        reply_markup=keyboards.confirm_delete(user_uuid),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def user_delete_pin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Request PIN for deletion"""
    query = update.callback_query
    await query.answer()
    
    user_uuid = query.data.split(":")[1]
    context.user_data['delete_user_uuid'] = user_uuid
    context.user_data['awaiting_delete_pin'] = True
    
    text = f"""
üîê <b>–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ PIN-–∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel
    """
    
    await query.edit_message_text(
        text.strip(),
        parse_mode=ParseMode.HTML
    )


@admin_only
async def handle_delete_pin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle PIN input for deletion"""
    if not context.user_data.get('awaiting_delete_pin'):
        return
    
    pin = update.message.text.strip()
    user_uuid = context.user_data.get('delete_user_uuid')
    
    is_valid, error = validators.validate_pin(pin, settings.pin_code)
    
    if not is_valid:
        await update.message.reply_text(
            f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
            parse_mode=ParseMode.HTML
        )
        return
    
    # Clear state
    context.user_data.pop('awaiting_delete_pin', None)
    context.user_data.pop('delete_user_uuid', None)
    
    try:
        await update.message.reply_text(
            "‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
            parse_mode=ParseMode.HTML
        )
        
        await api_client.delete_user(user_uuid)
        
        await update.message.reply_text(
            "‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>",
            reply_markup=keyboards.users_menu(),
            parse_mode=ParseMode.HTML
        )
        
    except RemnaWaveAPIError as e:
        log.error(f"Error deleting user: {e}")
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n{str(e)}",
            reply_markup=keyboards.back_to_main(),
            parse_mode=ParseMode.HTML
        )


# Register handlers
def register_users_handlers(application):
    """Register users management handlers"""
    application.add_handler(CallbackQueryHandler(users_menu_callback, pattern="^users_menu$"))
    application.add_handler(CallbackQueryHandler(users_list_callback, pattern="^users_list$"))
    application.add_handler(CallbackQueryHandler(users_list_callback, pattern="^users_page:"))
    application.add_handler(CallbackQueryHandler(user_view_callback, pattern="^user_view:"))
    application.add_handler(CallbackQueryHandler(user_extend_callback, pattern="^user_extend:"))
    application.add_handler(CallbackQueryHandler(extend_user_callback, pattern="^extend:"))
    application.add_handler(CallbackQueryHandler(user_delete_confirm_callback, pattern="^user_delete_confirm:"))
    application.add_handler(CallbackQueryHandler(user_delete_pin_callback, pattern="^user_delete_pin:"))
    
    # Message handler for PIN input
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_delete_pin
    ))
    
    log.info("Users handlers registered")

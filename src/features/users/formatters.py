"""
User data formatters
"""
from typing import Dict, Any
from datetime import datetime


def format_bytes(bytes_value: int) -> str:
    """Format bytes to human readable format"""
    if bytes_value == 0:
        return "0 B"
    
    units = ['B', 'KB', 'MB', 'GB', 'TB']
    unit_index = 0
    value = float(bytes_value)
    
    while value >= 1024 and unit_index < len(units) - 1:
        value /= 1024
        unit_index += 1
    
    return f"{value:.2f} {units[unit_index]}"


def format_date(date_str: str) -> str:
    """Format ISO date to readable format"""
    if not date_str:
        return "N/A"
    
    try:
        date = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        return date.strftime("%d.%m.%Y %H:%M")
    except:
        return date_str


def format_date_short(date_str: str) -> str:
    """Format ISO date to short readable format (without time)"""
    if not date_str:
        return "N/A"
    
    try:
        date = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        return date.strftime("%d.%m.%Y")
    except:
        return date_str


def format_user_full(user: Dict[str, Any], hwid_count: int = 0) -> str:
    """Format full user information"""
    username = user.get('username', 'N/A')
    status = user.get('status', 'unknown').upper()
    subscription_url = user.get('subscriptionUrl', 'N/A')
    tag = user.get('tag', '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    # Traffic info
    used_traffic = format_bytes(user.get('usedTrafficBytes', 0))
    lifetime_traffic = format_bytes(user.get('lifetimeUsedTrafficBytes', 0))
    traffic_limit = user.get('trafficLimitBytes', 0)
    traffic_limit_str = format_bytes(traffic_limit) if traffic_limit else "‚àû"
    
    # Dates
    created_at = format_date_short(user.get('createdAt', ''))
    expire_at = format_date_short(user.get('expireAt', ''))
    online_at = format_date_short(user.get('onlineAt', '')) if user.get('onlineAt') else "–ù–∏–∫–æ–≥–¥–∞"
    
    # Status emoji
    status_emoji = {
        'ACTIVE': '‚úÖ',
        'DISABLED': 'üö´',
        'LIMITED': '‚ö†Ô∏è',
        'EXPIRED': '‚è±Ô∏è'
    }.get(status, '‚ùì')
    
    # Additional info
    email = user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')
    telegram_id = user.get('telegramId', '–ù–µ —É–∫–∞–∑–∞–Ω')
    description = user.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
    
    text = f"""
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

<b>–ò–º—è:</b> {username}
<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status}
<b>–¢—ç–≥:</b> {tag}

üîó <b>–°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
<code>{subscription_url}</code>

üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b>
‚îú –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_traffic}
‚îú –í—Å–µ–≥–æ –∑–∞ –≤—Ä–µ–º—è: {lifetime_traffic}
‚îî –õ–∏–º–∏—Ç: {traffic_limit_str}

üìÖ <b>–î–∞—Ç—ã:</b>
‚îú –°–æ–∑–¥–∞–Ω: {created_at}
‚îú –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_at}
‚îî –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {online_at}

üíª <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤ (HWID):</b> {hwid_count}

üìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú Email: {email}
‚îú Telegram ID: {telegram_id}
‚îî –û–ø–∏—Å–∞–Ω–∏–µ: {description}
    """
    
    return text.strip()


def format_user_short(user: Dict[str, Any]) -> str:
    """Format user in short format for lists"""
    username = user.get('username', 'N/A')
    status = user.get('status', 'unknown').upper()
    used_traffic = format_bytes(user.get('usedTrafficBytes', 0))
    
    status_emoji = {
        'ACTIVE': '‚úÖ',
        'DISABLED': 'üö´',
        'LIMITED': '‚ö†Ô∏è',
        'EXPIRED': '‚è±Ô∏è'
    }.get(status, '‚ùì')
    
    return f"{status_emoji} <b>{username}</b> | {used_traffic}"


def status_badge(status: str) -> str:
    """Return status emoji badge"""
    status_emoji = {
        'ACTIVE': '‚úÖ',
        'DISABLED': 'üö´',
        'LIMITED': '‚ö†Ô∏è',
        'EXPIRED': '‚è±Ô∏è',
        'UNKNOWN': '‚ùì'
    }
    return status_emoji.get(status.upper(), '‚ùì')


def progress_bar(percent: float, width: int = 10) -> str:
    """Generate text progress bar"""
    filled = int((percent / 100) * width)
    empty = width - filled
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    bar = '‚ñà' * filled + '‚ñë' * empty
    return bar
